<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\UART_DMA.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\UART_DMA.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Jan 18 14:48:25 2018
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; uart1Initialization &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1f]">Vector_Table</a>
 <LI><a href="#[a]">Reset_Go</a>
 <LI><a href="#[6d]">sysSetupCP15</a>
 <LI><a href="#[4a]">sys_flush_and_clean_dcache</a>
 <LI><a href="#[b]">Undefined_Handler</a>
 <LI><a href="#[c]">SWI_Handler1</a>
 <LI><a href="#[d]">Prefetch_Handler</a>
 <LI><a href="#[e]">Abort_Handler</a>
 <LI><a href="#[f]">IRQ_Handler</a>
 <LI><a href="#[10]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4a]">sys_flush_and_clean_dcache</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">sys_flush_and_clean_dcache</a><BR>
 <LI><a href="#[b]">Undefined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">Undefined_Handler</a><BR>
 <LI><a href="#[c]">SWI_Handler1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SWI_Handler1</a><BR>
 <LI><a href="#[d]">Prefetch_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">Prefetch_Handler</a><BR>
 <LI><a href="#[e]">Abort_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">Abort_Handler</a><BR>
 <LI><a href="#[f]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">IRQ_Handler</a><BR>
 <LI><a href="#[10]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">Abort_Handler</a> from startup_nuc970.o(NUC_INIT) referenced from startup_nuc970.o(NUC_INIT)
 <LI><a href="#[10]">FIQ_Handler</a> from startup_nuc970.o(NUC_INIT) referenced from startup_nuc970.o(NUC_INIT)
 <LI><a href="#[f]">IRQ_Handler</a> from startup_nuc970.o(NUC_INIT) referenced from startup_nuc970.o(NUC_INIT)
 <LI><a href="#[d]">Prefetch_Handler</a> from startup_nuc970.o(NUC_INIT) referenced from startup_nuc970.o(NUC_INIT)
 <LI><a href="#[a]">Reset_Go</a> from startup_nuc970.o(NUC_INIT) referenced from startup_nuc970.o(NUC_INIT)
 <LI><a href="#[c]">SWI_Handler1</a> from startup_nuc970.o(NUC_INIT) referenced from startup_nuc970.o(NUC_INIT)
 <LI><a href="#[9]">SYS_Interrupt_Shell</a> from sys.o(i.SYS_Interrupt_Shell) referenced 244 times from sys.o(.data)
 <LI><a href="#[b]">Undefined_Handler</a> from startup_nuc970.o(NUC_INIT) referenced from startup_nuc970.o(NUC_INIT)
 <LI><a href="#[11]">main</a> from main.o(i.main) referenced from __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[1e]">sysFiqHandler</a> from sys.o(i.sysFiqHandler) referenced from sys.o(i.sysInitializeAIC)
 <LI><a href="#[1d]">sysIrqHandler</a> from sys.o(i.sysIrqHandler) referenced from sys.o(i.sysInitializeAIC)
 <LI><a href="#[12]">uart0ISR</a> from uart.o(i.uart0ISR) referenced from uart.o(i._uartInstallISR)
 <LI><a href="#[1c]">uart10ISR</a> from uart.o(i.uart10ISR) referenced from uart.o(i._uartInstallISR)
 <LI><a href="#[13]">uart1ISR</a> from uart.o(i.uart1ISR) referenced from uart.o(i._uartInstallISR)
 <LI><a href="#[14]">uart2ISR</a> from uart.o(i.uart2ISR) referenced from uart.o(i._uartInstallISR)
 <LI><a href="#[15]">uart3ISR</a> from uart.o(i.uart3ISR) referenced from uart.o(i._uartInstallISR)
 <LI><a href="#[16]">uart4ISR</a> from uart.o(i.uart4ISR) referenced from uart.o(i._uartInstallISR)
 <LI><a href="#[17]">uart5ISR</a> from uart.o(i.uart5ISR) referenced from uart.o(i._uartInstallISR)
 <LI><a href="#[18]">uart6ISR</a> from uart.o(i.uart6ISR) referenced from uart.o(i._uartInstallISR)
 <LI><a href="#[19]">uart7ISR</a> from uart.o(i.uart7ISR) referenced from uart.o(i._uartInstallISR)
 <LI><a href="#[1a]">uart8ISR</a> from uart.o(i.uart8ISR) referenced from uart.o(i._uartInstallISR)
 <LI><a href="#[1b]">uart9ISR</a> from uart.o(i.uart9ISR) referenced from uart.o(i._uartInstallISR)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1f]"></a>Vector_Table</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup_nuc970.o(NUC_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Go
</UL>

<P><STRONG><a name="[a]"></a>Reset_Go</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup_nuc970.o(NUC_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc970.o(NUC_INIT)
</UL>
<P><STRONG><a name="[20]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Go
</UL>

<P><STRONG><a name="[21]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[23]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[75]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[76]"></a>__decompress</STRONG> (ARM, 92 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[77]"></a>__decompress1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[24]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[78]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[79]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[25]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[7a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[7b]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[7d]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[80]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[81]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[82]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[83]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[84]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[85]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[86]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[87]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[88]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[89]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
</UL>

<P><STRONG><a name="[8e]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[8f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[90]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[91]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[92]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[93]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[94]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[22]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[95]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[27]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[29]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[96]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2b]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[97]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[42]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[2d]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[98]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2f]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[99]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[31]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartBUFSpaceAlloc (via BLX)
</UL>

<P><STRONG><a name="[34]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartBUFSpaceAlloc (via BLX)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[4f]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdmaInit (via BLX)
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>

<P><STRONG><a name="[35]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[9a]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartBUFSpaceAlloc
</UL>

<P><STRONG><a name="[37]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[9b]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartGetRegisterValue
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartBUFSpaceAlloc
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__rt_heap_descriptor</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_heap_descriptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via BLX)
</UL>

<P><STRONG><a name="[a0]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[3b]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[26]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[3e]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[3c]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[3d]"></a>__rt_heap_escrow</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, heapauxa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[39]"></a>__rt_heap_expand</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, heapauxa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[2c]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[40]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[3f]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[43]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartSetBaudRate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
</UL>

<P><STRONG><a name="[6d]"></a>sysSetupCP15</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_nuc970.o(SYS_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>

<P><STRONG><a name="[4a]"></a>sys_flush_and_clean_dcache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_nuc970.o(SYS_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
</UL>

<P><STRONG><a name="[51]"></a>RS485_HANDLE</STRONG> (ARM, 204 bytes, Stack size 16 bytes, uart.o(i.RS485_HANDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RS485_HANDLE &rArr; _uartReceiveChars
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart9ISR
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8ISR
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart7ISR
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6ISR
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5ISR
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4ISR
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3ISR
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2ISR
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1ISR
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart10ISR
</UL>

<P><STRONG><a name="[9]"></a>SYS_Interrupt_Shell</STRONG> (ARM, 24 bytes, Stack size 8 bytes, sys.o(i.SYS_Interrupt_Shell))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SYS_Interrupt_Shell &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>_PutChar_f</STRONG> (ARM, 80 bytes, Stack size 0 bytes, sys_uart.o(i._PutChar_f))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutString
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutStringReverse
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[28]"></a>__user_setup_stackheap</STRONG> (ARM, 44 bytes, Stack size 32 bytes, standalone.o(i.__user_setup_stackheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[30]"></a>_sys_exit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, standalone.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit (via BLX)
</UL>

<P><STRONG><a name="[44]"></a>_ttywrch</STRONG> (ARM, 8 bytes, Stack size 0 bytes, standalone.o(i._ttywrch))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display (via BLX)
</UL>

<P><STRONG><a name="[64]"></a>gdmaInit</STRONG> (ARM, 140 bytes, Stack size 8 bytes, main.o(i.gdmaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gdmaInit &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>main</STRONG> (ARM, 44 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = main &rArr; uart1Initialization &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetMMUMappingMethod
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInvalidCache
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1Initialization
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gdmaInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[65]"></a>sysDisableCache</STRONG> (ARM, 64 bytes, Stack size 8 bytes, system_nuc970.o(i.sysDisableCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sysDisableCache
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>sysEnableCache</STRONG> (ARM, 44 bytes, Stack size 8 bytes, system_nuc970.o(i.sysEnableCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sysEnableCache &rArr; sysInitMMUTable &rArr; sysInitPageTable
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>sysEnableInterrupt</STRONG> (ARM, 84 bytes, Stack size 0 bytes, sys.o(i.sysEnableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartInstallISR
</UL>

<P><STRONG><a name="[1e]"></a>sysFiqHandler</STRONG> (ARM, 104 bytes, Stack size 32 bytes, sys.o(i.sysFiqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sysFiqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.sysInitializeAIC)
</UL>
<P><STRONG><a name="[6e]"></a>sysGetCacheState</STRONG> (ARM, 12 bytes, Stack size 0 bytes, system_nuc970.o(i.sysGetCacheState))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitPageTable
</UL>

<P><STRONG><a name="[6b]"></a>sysGetSdramSizebyMB</STRONG> (ARM, 456 bytes, Stack size 12 bytes, system_nuc970.o(i.sysGetSdramSizebyMB))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysGetSdramSizebyMB
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>

<P><STRONG><a name="[6a]"></a>sysInitMMUTable</STRONG> (ARM, 688 bytes, Stack size 32 bytes, system_nuc970.o(i.sysInitMMUTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = sysInitMMUTable &rArr; sysInitPageTable
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetupCP15
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitPageTable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSdramSizebyMB
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
</UL>

<P><STRONG><a name="[6c]"></a>sysInitPageTable</STRONG> (ARM, 384 bytes, Stack size 48 bytes, system_nuc970.o(i.sysInitPageTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sysInitPageTable
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>

<P><STRONG><a name="[6f]"></a>sysInitializeAIC</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sys.o(i.sysInitializeAIC))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
</UL>

<P><STRONG><a name="[5e]"></a>sysInstallISR</STRONG> (ARM, 164 bytes, Stack size 20 bytes, sys.o(i.sysInstallISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sysInstallISR
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartInstallISR
</UL>

<P><STRONG><a name="[66]"></a>sysInvalidCache</STRONG> (ARM, 12 bytes, Stack size 0 bytes, system_nuc970.o(i.sysInvalidCache))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d]"></a>sysIrqHandler</STRONG> (ARM, 104 bytes, Stack size 32 bytes, sys.o(i.sysIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sysIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.sysInitializeAIC)
</UL>
<P><STRONG><a name="[4e]"></a>sysPutString</STRONG> (ARM, 40 bytes, Stack size 4 bytes, sys_uart.o(i.sysPutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sysPutString
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[5f]"></a>sysSetLocalInterrupt</STRONG> (ARM, 140 bytes, Stack size 0 bytes, sys.o(i.sysSetLocalInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartInstallISR
</UL>

<P><STRONG><a name="[67]"></a>sysSetMMUMappingMethod</STRONG> (ARM, 20 bytes, Stack size 0 bytes, system_nuc970.o(i.sysSetMMUMappingMethod))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>sysprintf</STRONG> (ARM, 112 bytes, Stack size 24 bytes, sys_uart.o(i.sysprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Interrupt_Shell
</UL>

<P><STRONG><a name="[12]"></a>uart0ISR</STRONG> (ARM, 128 bytes, Stack size 16 bytes, uart.o(i.uart0ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart0ISR &rArr; _uartReceiveChars
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i._uartInstallISR)
</UL>
<P><STRONG><a name="[1c]"></a>uart10ISR</STRONG> (ARM, 252 bytes, Stack size 24 bytes, uart.o(i.uart10ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart10ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i._uartInstallISR)
</UL>
<P><STRONG><a name="[13]"></a>uart1ISR</STRONG> (ARM, 252 bytes, Stack size 24 bytes, uart.o(i.uart1ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart1ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i._uartInstallISR)
</UL>
<P><STRONG><a name="[69]"></a>uart1Initialization</STRONG> (ARM, 116 bytes, Stack size 24 bytes, main.o(i.uart1Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = uart1Initialization &rArr; uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14]"></a>uart2ISR</STRONG> (ARM, 308 bytes, Stack size 24 bytes, uart.o(i.uart2ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart2ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i._uartInstallISR)
</UL>
<P><STRONG><a name="[15]"></a>uart3ISR</STRONG> (ARM, 252 bytes, Stack size 24 bytes, uart.o(i.uart3ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart3ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i._uartInstallISR)
</UL>
<P><STRONG><a name="[16]"></a>uart4ISR</STRONG> (ARM, 252 bytes, Stack size 24 bytes, uart.o(i.uart4ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart4ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i._uartInstallISR)
</UL>
<P><STRONG><a name="[17]"></a>uart5ISR</STRONG> (ARM, 252 bytes, Stack size 24 bytes, uart.o(i.uart5ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart5ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i._uartInstallISR)
</UL>
<P><STRONG><a name="[18]"></a>uart6ISR</STRONG> (ARM, 252 bytes, Stack size 24 bytes, uart.o(i.uart6ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart6ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i._uartInstallISR)
</UL>
<P><STRONG><a name="[19]"></a>uart7ISR</STRONG> (ARM, 252 bytes, Stack size 24 bytes, uart.o(i.uart7ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart7ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i._uartInstallISR)
</UL>
<P><STRONG><a name="[1a]"></a>uart8ISR</STRONG> (ARM, 252 bytes, Stack size 24 bytes, uart.o(i.uart8ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart8ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i._uartInstallISR)
</UL>
<P><STRONG><a name="[1b]"></a>uart9ISR</STRONG> (ARM, 252 bytes, Stack size 24 bytes, uart.o(i.uart9ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart9ISR &rArr; RS485_HANDLE &rArr; _uartReceiveChars
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i._uartInstallISR)
</UL>
<P><STRONG><a name="[72]"></a>uartIoctl</STRONG> (ARM, 1996 bytes, Stack size 40 bytes, uart.o(i.uartIoctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = uartIoctl &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartPerformIrDA
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartGetRegisterValue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartEnableInterrupt
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartDisableInterrupt
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartConfigureUART
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1Initialization
</UL>

<P><STRONG><a name="[71]"></a>uartOpen</STRONG> (ARM, 100 bytes, Stack size 16 bytes, uart.o(i.uartOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = uartOpen &rArr; _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartConfigureUART
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1Initialization
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4b]"></a>FormatItem</STRONG> (ARM, 556 bytes, Stack size 40 bytes, sys_uart.o(i.FormatItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutString
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[50]"></a>sysPutNumber</STRONG> (ARM, 448 bytes, Stack size 80 bytes, sys_uart.o(i.sysPutNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutStringReverse
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[4d]"></a>sysPutRepChar</STRONG> (ARM, 40 bytes, Stack size 8 bytes, sys_uart.o(i.sysPutRepChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysPutRepChar
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[70]"></a>sysPutStringReverse</STRONG> (ARM, 40 bytes, Stack size 8 bytes, sys_uart.o(i.sysPutStringReverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
</UL>

<P><STRONG><a name="[54]"></a>_uartBUFSpaceAlloc</STRONG> (ARM, 236 bytes, Stack size 16 bytes, uart.o(i._uartBUFSpaceAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _uartBUFSpaceAlloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartConfigureUART
</UL>

<P><STRONG><a name="[57]"></a>_uartCheckModemStatus</STRONG> (ARM, 156 bytes, Stack size 24 bytes, uart.o(i._uartCheckModemStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _uartCheckModemStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartEnableInterrupt
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartDisableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart9ISR
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8ISR
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart7ISR
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6ISR
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5ISR
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4ISR
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3ISR
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2ISR
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1ISR
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart10ISR
</UL>

<P><STRONG><a name="[5a]"></a>_uartConfigureUART</STRONG> (ARM, 728 bytes, Stack size 32 bytes, uart.o(i._uartConfigureUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _uartConfigureUART &rArr; _uartBUFSpaceAlloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartSetBaudRate
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartInstallISR
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartEnableInterrupt
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartBUFSpaceAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartOpen
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>

<P><STRONG><a name="[59]"></a>_uartDisableInterrupt</STRONG> (ARM, 64 bytes, Stack size 0 bytes, uart.o(i._uartDisableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>

<P><STRONG><a name="[58]"></a>_uartEnableInterrupt</STRONG> (ARM, 36 bytes, Stack size 0 bytes, uart.o(i._uartEnableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartConfigureUART
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartCheckModemStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>

<P><STRONG><a name="[5d]"></a>_uartGetRegisterValue</STRONG> (ARM, 548 bytes, Stack size 24 bytes, uart.o(i._uartGetRegisterValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _uartGetRegisterValue &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>

<P><STRONG><a name="[5c]"></a>_uartInstallISR</STRONG> (ARM, 444 bytes, Stack size 16 bytes, uart.o(i._uartInstallISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _uartInstallISR &rArr; sysInstallISR
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartConfigureUART
</UL>

<P><STRONG><a name="[74]"></a>_uartPerformIrDA</STRONG> (ARM, 168 bytes, Stack size 8 bytes, uart.o(i._uartPerformIrDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _uartPerformIrDA
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartIoctl
</UL>

<P><STRONG><a name="[52]"></a>_uartReceiveChars</STRONG> (ARM, 744 bytes, Stack size 56 bytes, uart.o(i._uartReceiveChars))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _uartReceiveChars
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartRxBufGetNextOne
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart9ISR
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8ISR
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart7ISR
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6ISR
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5ISR
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4ISR
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3ISR
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2ISR
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1ISR
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart10ISR
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0ISR
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_HANDLE
</UL>

<P><STRONG><a name="[61]"></a>_uartRxBufGetNextOne</STRONG> (ARM, 40 bytes, Stack size 0 bytes, uart.o(i._uartRxBufGetNextOne))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartReceiveChars
</UL>

<P><STRONG><a name="[5b]"></a>_uartSetBaudRate</STRONG> (ARM, 92 bytes, Stack size 32 bytes, uart.o(i._uartSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = _uartSetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartConfigureUART
</UL>

<P><STRONG><a name="[62]"></a>_uartTransmitChars</STRONG> (ARM, 152 bytes, Stack size 16 bytes, uart.o(i._uartTransmitChars))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _uartTransmitChars
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTxBufGetNextOne
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartDisableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart9ISR
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart8ISR
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart7ISR
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6ISR
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5ISR
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4ISR
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3ISR
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2ISR
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1ISR
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart10ISR
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0ISR
</UL>

<P><STRONG><a name="[63]"></a>_uartTxBufGetNextOne</STRONG> (ARM, 40 bytes, Stack size 0 bytes, uart.o(i._uartTxBufGetNextOne))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_uartTransmitChars
</UL>

<P><STRONG><a name="[b]"></a>Undefined_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup_nuc970.o(NUC_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc970.o(NUC_INIT)
</UL>
<P><STRONG><a name="[c]"></a>SWI_Handler1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup_nuc970.o(NUC_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler1
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc970.o(NUC_INIT)
</UL>
<P><STRONG><a name="[d]"></a>Prefetch_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup_nuc970.o(NUC_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc970.o(NUC_INIT)
</UL>
<P><STRONG><a name="[e]"></a>Abort_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup_nuc970.o(NUC_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc970.o(NUC_INIT)
</UL>
<P><STRONG><a name="[f]"></a>IRQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup_nuc970.o(NUC_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc970.o(NUC_INIT)
</UL>
<P><STRONG><a name="[10]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup_nuc970.o(NUC_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc970.o(NUC_INIT)
</UL>
<P><STRONG><a name="[48]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[47]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[46]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[49]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[41]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
